package main

import (
	//"strings"
	//"bytes"
	//"net/http"
	//"io/ioutil"
	//"math/rand"
	//"time"
	//"encoding/base64"

	"encoding/base64"
	"errors"
	"fmt"
	"image"
	"image/jpeg"
	"image/png"
	"io"
	"math"
	"os"
	"strings"
	"time"

	//	"unsafe"

	"github.com/nfnt/resize"
	"github.com/veandco/go-sdl2/sdl"
)

const floor_texture = "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"

const wall_texture = ""

const sky_texture = ""

const unknown_texture = "/9j/4AAQSkZJRgABAQIAdgB2AAD/2wBDABALDA4MChAODQ4SERATGCgaGBYWGDEjJR0oOjM9PDkzODdASFxOQERXRTc4UG1RV19iZ2hnPk1xeXBkeFxlZ2P/2wBDARESEhgVGC8aGi9jQjhCY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2P/wAARCAAgAEgDAREAAhEBAxEB/8QAGgAAAwADAQAAAAAAAAAAAAAAAwQFAAIGAf/EACsQAAICAQMEAQMDBQAAAAAAAAECAwQRAAUhBhIxQRMiMnEUUZFhgaGiwf/EABQBAQAAAAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwDop+oVPUabTWMRKjMxdXznBPauBjPAOScc6AtbqKiKFCa/Zhrz24lcR5/f/n50DUu9bbDuC0JLkS2mIAjJ5yfA/oTnQNWJ4qteSedwkUalnY+gNAjW6h2i3ZStXvwyTOSFVT5x50EPcup7kFqCOC1tUcUkCS/LYEmH7iw+nHrAHn99ASfqO4vUBoiztcMCyIo+YSd7gqpJXHHvAzoK777Qqhv1t2vHmR1TkjIVsEc+wfOgI++bZHeSk92EWXICx93OT4H98jQbpSdd2s2yy9ksEcQUeQVLkn/YaCS3SzrFHHX3KWFRXSCUCJW+QJntPPI8+tAu9S1L1IIo0vfpRZFiX5IUWEsBnIf7m5AwPWgpydNbd8N9a0RglvIySyBmbz7wTjQbHY4hK8kcnZ3WI5wAg+ntULgfkD/OgAdgsJUr1a+72III4FhkRY1IcD2Mg9pOdBvNsUssgjG5TrQwoNTtUjCgDAYjIHHj86D2Pp+FJ2laUvlZwAV8fK/cSPx40EiLb7S73DUjF5qsUySymSFFiZlX7g2e48gcetB2GgHPNHXgkmmYJHGpd2PoAZJ0Cu4bpDQjidorE5l+1YIi7EezgeudAzWsR260ViBu6KVQ6HGMgjI0GCxEbLVw4+ZUDlPYUkgH+QdAXQJblucW2qhkisTNIT2pBEXbA8nA9DQMVrEdutFYgbuilUOhxjIIyNAXQZoEN72+PdNpsVZI/kLIewZx9ePpP86CfZ26zU2evR26issPbiSNbTQsrcchh5Gc5GgDLtO6NBVVXVWgrrHOUk7f1I9oMfbjnDeefWgMOnaw3yS9HWEZauFV+8/TJyDxn9sfxoEF2vd7kMMNusKyxJBCWjs5LqrgswxgjIGgoXdtsU9tSjtlVrNclu5WttE65ORh/JHJ40FTbIJq221oLDq80cSq7KMAkD1oGtB//9k="

var first_texture = [64 * 64]uint32{}
var second_texture = [320 * 640]uint32{}
var third_texture = [64 * 64]uint32{}
var fourth_texture = [64 * 64]uint32{}

// go get -v github.com/veandco/go-sdl2/sdl

type Player struct {
	PosX   float64
	PosY   float64
	DirX   float64
	DirY   float64
	PlaneX float64
	PlaneY float64
	Angle  float64
	LookY  int32
	Speed  float64
}

type Keyboard struct {
	KeyUp       int32
	KeyDown     int32
	KeyLeft     int32
	KeyRight    int32
	KeyAction   int32
	KeyLookUp   int32
	KeyLookDown int32
}

var worldmap = [24][24]int32{
	{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7},
	{4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7},
	{4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 7},
	{4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 7},
	{4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7},
	{4, 0, 4, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 0, 7, 7, 7, 7, 7},
	{4, 0, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 0, 5, 7, 0, 0, 0, 7, 7, 7, 1},
	{4, 0, 6, 0, 0, 0, 0, 5, 0, 1, 0, 2, 0, 2, 0, 5, 7, 0, 0, 0, 0, 0, 0, 8},
	{4, 0, 7, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 1},
	{4, 0, 8, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 5, 7, 0, 0, 0, 0, 0, 0, 8},
	{4, 0, 1, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 1, 0, 5, 7, 0, 0, 0, 7, 7, 0, 1},
	{4, 0, 1, 0, 0, 1, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 0, 1},
	{6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 6},
	{8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4},
	{6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6},
	{4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 6, 0, 6, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 3},
	{4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 0, 6, 2, 1, 1, 0, 0, 0, 2, 0, 0, 0, 2},
	{4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 2, 0, 1, 1, 2},
	{4, 0, 1, 0, 0, 3, 0, 1, 0, 4, 6, 0, 6, 2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2},
	{4, 0, 6, 0, 6, 0, 0, 0, 0, 4, 6, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 2},
	{4, 0, 0, 5, 0, 0, 0, 0, 0, 4, 6, 0, 6, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 2},
	{4, 0, 6, 0, 6, 1, 0, 0, 0, 4, 6, 0, 6, 2, 0, 0, 5, 0, 0, 2, 0, 0, 0, 2},
	{4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 0, 6, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2},
	{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3},
}

var screenbuffer [320 * 200 * 4]byte

// flags:
// 1- cmd param
// 2- missing texture
// 3- cheat code
// 4- backdoor
// 5- hidden room: there's an hidden area on the map. can you get there?

func main() {
	////////////////////////////////////////////////////////////////////////////
	// COMMAND LINE
	////////////////////////////////////////////////////////////////////////////
	if len(os.Args) == 2 && os.Args[1] == "--unveil" {
		array1 := [17]byte{0, 237, 157, 171, 143, 163, 193, 87, 158, 38, 10, 137, 217, 51, 120, 221, 141}
		array2 := [17]byte{102, 129, 252, 204, 162, 205, 174, 35, 237, 73, 121, 236, 186, 65, 29, 169}
		for i := 0; i < len(array1); i++ {
			array1[i] ^= array2[i]
		}
		fmt.Println(string(array1[:16]))
	}

	////////////////////////////////////////////////////////////////////////////
	// INIT SDL, WINDOW, RENDERER, TEXTURE
	////////////////////////////////////////////////////////////////////////////
	if err := sdl.Init(sdl.INIT_EVERYTHING); err != nil {
		panic(err)
	}
	defer sdl.Quit()

	window, err := sdl.CreateWindow("Raycaster", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED,
		960, 600, sdl.WINDOW_SHOWN|sdl.WINDOW_RESIZABLE)
	if err != nil {
		panic(err)
	}
	window.SetMinimumSize(320, 200)
	defer window.Destroy()

	renderer, err := sdl.CreateRenderer(window, -1, sdl.RENDERER_ACCELERATED)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to create renderer: %s\n", err)
		panic(err)
	}
	renderer.SetLogicalSize(320, 200)
	defer renderer.Destroy()

	// Create texture for intermediate rendering
	texture, err := renderer.CreateTexture(sdl.PIXELFORMAT_RGBA8888, sdl.TEXTUREACCESS_STREAMING, 320, 200)
	if err != nil {
		panic(err)
	}
	defer texture.Destroy()

	////////////////////////////////////////////////////////////////////////////
	// INIT PLAYER STATE
	////////////////////////////////////////////////////////////////////////////

	// Define player and keyboard
	player := Player{22, 11.5, -1, 0, 0, 0.66, 0, 0, 0.05}
	keyboard := Keyboard{0, 0, 0, 0, 0, 0, 0}

	////////////////////////////////////////////////////////////////////////////
	// DECODE GAME TEXTURE
	////////////////////////////////////////////////////////////////////////////
	textureDecoder(wall_texture, "png", true, first_texture[:])
	textureDecoder(sky_texture, "jpg", false, second_texture[:])
	textureDecoder(floor_texture, "png", false, third_texture[:])
	textureDecoder(unknown_texture, "jpg", false, fourth_texture[:])

	running := true
	for running {
		start := time.Now()

		////////////////////////////////////////////////////////////////////////////
		// GET KEYS AND EVENTS
		////////////////////////////////////////////////////////////////////////////
		for event := sdl.PollEvent(); event != nil; event = sdl.PollEvent() {
			switch t := event.(type) {
			case *sdl.QuitEvent:
				println("Quit")
				running = false

			case *sdl.KeyboardEvent:
				keyCode := t.Keysym.Sym
				keyPressed := t.State

				switch keyCode {

				case sdl.K_ESCAPE:
					running = false
					println("Esc key")

				case sdl.K_UP:
					println("Up key")
					if keyPressed == sdl.PRESSED {
						keyboard.KeyUp += 1
					} else if keyPressed == sdl.RELEASED {
						keyboard.KeyUp = 0
					}

				case sdl.K_DOWN:
					println("down key")
					if keyPressed == sdl.PRESSED {
						keyboard.KeyDown += 1
					} else if keyPressed == sdl.RELEASED {
						keyboard.KeyDown = 0
					}

				case sdl.K_LEFT:
					println("left key")
					if keyPressed == sdl.PRESSED {
						keyboard.KeyLeft += 1
					} else if keyPressed == sdl.RELEASED {
						keyboard.KeyLeft = 0
					}

				case sdl.K_RIGHT:
					println("Right key")
					if keyPressed == sdl.PRESSED {
						keyboard.KeyRight += 1
					} else if keyPressed == sdl.RELEASED {
						keyboard.KeyRight = 0
					}

				case sdl.K_RCTRL, sdl.K_LCTRL:
					println("ctrl key")
					if keyPressed == sdl.PRESSED {
						keyboard.KeyAction += 1
					} else if keyPressed == sdl.RELEASED {
						keyboard.KeyAction = 0
					}

				case sdl.K_RSHIFT, sdl.K_LSHIFT:
					println("Modify speed")
					if keyPressed == sdl.PRESSED {
						player.Speed *= 2
					} else if keyPressed == sdl.RELEASED {
						player.Speed /= 2
					}

				case sdl.K_PAGEUP:
					println("page up")
					if keyPressed == sdl.PRESSED {
						keyboard.KeyLookUp += 1
					} else if keyPressed == sdl.RELEASED {
						keyboard.KeyLookUp = 0
					}

				case sdl.K_PAGEDOWN:
					println("page down")
					if keyPressed == sdl.PRESSED {
						keyboard.KeyLookDown += 1
					} else if keyPressed == sdl.RELEASED {
						keyboard.KeyLookDown = 0
					}

				} // END SWITCH
			}
		}

		////////////////////////////////////////////////////////////////////////////
		// UPDATE PLAYER
		////////////////////////////////////////////////////////////////////////////

		if keyboard.KeyUp > 0 {
			if worldmap[int32(player.PosX+player.DirX*player.Speed)][int32(player.PosY)] == 0 {
				player.PosX += player.DirX * player.Speed
			}

			if worldmap[int32(player.PosX)][int32(player.PosY+player.DirY*player.Speed)] == 0 {
				player.PosY += player.DirY * player.Speed
			}
		}

		if keyboard.KeyDown > 0 {
			if worldmap[int32(player.PosX-player.DirX*player.Speed)][int32(player.PosY)] == 0 {
				player.PosX -= player.DirX * player.Speed
			}

			if worldmap[int32(player.PosX)][int32(player.PosY-player.DirY*player.Speed)] == 0 {
				player.PosY -= player.DirY * player.Speed
			}
		}

		if keyboard.KeyRight > 0 {
			var oldDirX float64 = player.DirX
			var rotSpeed float64 = player.Speed
			player.Angle += rotSpeed
			player.DirX = player.DirX*math.Cos(-rotSpeed) - player.DirY*math.Sin(-rotSpeed)
			player.DirY = oldDirX*math.Sin(-rotSpeed) + player.DirY*math.Cos(-rotSpeed)
			var oldPlaneX float64 = player.PlaneX
			player.PlaneX = player.PlaneX*math.Cos(-rotSpeed) - player.PlaneY*math.Sin(-rotSpeed)
			player.PlaneY = oldPlaneX*math.Sin(-rotSpeed) + player.PlaneY*math.Cos(-rotSpeed)
		}

		if keyboard.KeyLeft > 0 {
			var oldDirX float64 = player.DirX
			var rotSpeed float64 = player.Speed
			player.Angle -= rotSpeed
			player.DirX = player.DirX*math.Cos(rotSpeed) - player.DirY*math.Sin(rotSpeed)
			player.DirY = oldDirX*math.Sin(rotSpeed) + player.DirY*math.Cos(rotSpeed)
			var oldPlaneX float64 = player.PlaneX
			player.PlaneX = player.PlaneX*math.Cos(rotSpeed) - player.PlaneY*math.Sin(rotSpeed)
			player.PlaneY = oldPlaneX*math.Sin(rotSpeed) + player.PlaneY*math.Cos(rotSpeed)
		}

		if keyboard.KeyLookUp > 0 {
			if player.LookY < 100 {
				player.LookY += 10
			}
		}
		if keyboard.KeyLookDown > 0 {
			if player.LookY > -100 {
				player.LookY -= 10
			}
		}

		////////////////////////////////////////////////////////////////////////////
		// CLEAR RENDERER
		////////////////////////////////////////////////////////////////////////////

		renderer.SetDrawColor(0, 0, 0, 0)
		renderer.Clear()

		////////////////////////////////////////////////////////////////////////////
		// RENDER GAME WORLD AND UPDATE RENDERER
		////////////////////////////////////////////////////////////////////////////

		renderSky(&player)
		renderFloors(&player)
		renderWalls(&player)
		renderMinimap(&player)

		texture.Update(nil, screenbuffer[:], 320*4)
		renderer.Copy(texture, nil, nil)

		////////////////////////////////////////////////////////////////////////////
		// UPDATE SDL WINDOW
		////////////////////////////////////////////////////////////////////////////

		renderer.Present()
		elapsed := int(time.Since(start).Milliseconds())

		if 16-elapsed < 0 {
			elapsed = 0
		} else {
			elapsed = 16 - elapsed
		}

		sdl.Delay(uint32(elapsed))
	}
}

func putPixel(x int32, y int32, color uint32) {
	// ignore values that are out of range
	if x >= 0 && x < 320 {
		if y >= 0 && y < 200 {
			index := (y*320 + x) * 4
			screenbuffer[index+0] = uint8(color & 0xFF)
			screenbuffer[index+1] = uint8((color >> 8) & 0xFF)
			screenbuffer[index+2] = uint8((color >> 16) & 0xFF)
			screenbuffer[index+3] = uint8((color >> 24) & 0xFF)
		}
	}
}

func renderSky(player *Player) {
	// Do cylindrical projection?
	for x := 0; x < 320; x++ {
		for y := 0; y < 200; y++ {
			slide := x + int(player.Angle*205)
			// Disgusting
			for slide < 0 {
				slide += 1280
			}
			var color uint32 = second_texture[slide%640+y*640]
			putPixel(int32(x), int32(y+int(player.LookY))-105, color)
		}
	}
}

func renderMinimap(player *Player) {
	for y := 0; y < 24; y++ {
		for x := 0; x < 24; x++ {
			if worldmap[y][x] > 0 {
				var color uint32 = 0x00FF00FF
				putPixel(int32(x), int32(y), color)
			}
		}
	}

	var color uint32 = 0xFF0000FF
	putPixel(int32(player.PosY), int32(player.PosX), color)
}

func renderFloors(player *Player) {
	for y := 100 + int(player.LookY); y < 200; y++ {
		rayDirX0 := player.DirX - player.PlaneX
		rayDirY0 := player.DirY - player.PlaneY
		rayDirX1 := player.DirX + player.PlaneX
		rayDirY1 := player.DirY + player.PlaneY

		// current pos compared to screen center
		p := y - 200/2 - int(player.LookY) + 1
		posZ := 0.5 * 200
		rowDistance := posZ / float64(p)

		// step vector on floor texture
		floorStepX := rowDistance * (rayDirX1 - rayDirX0) / 320
		floorStepY := rowDistance * (rayDirY1 - rayDirY0) / 320

		floorX := player.PosX + rowDistance*rayDirX0
		floorY := player.PosY + rowDistance*rayDirY0

		for x := 0; x < 320; x++ {
			cellX := int32(floorX)
			cellY := int32(floorY)

			tx := int32(64*(floorX-float64(cellX))) & (64 - 1)
			ty := int32(64*(floorY-float64(cellY))) & (64 - 1)

			floorX += floorStepX
			floorY += floorStepY

			var color uint32 = third_texture[tx+ty*64]
			color = (color >> 1) & 0x7F7F7F7F
			putPixel(int32(x), int32(y), color)
		}
	}
}

func renderWalls(player *Player) {
	var w int32 = 320
	for x := 0; x < 320; x++ {
		var cameraX float64 = 2.0*float64(x)/float64(w) - 1
		var rayDirX = player.DirX + player.PlaneX*cameraX
		var rayDirY = player.DirY + player.PlaneY*cameraX

		var mapX int32 = int32(player.PosX)
		var mapY int32 = int32(player.PosY)

		var sideDistX float64 = 0
		var sideDistY float64 = 0

		var deltaDistX = math.Abs(1.0 / rayDirX)
		var deltaDistY = math.Abs(1.0 / rayDirY)
		var perpWallDist float64 = 0

		var stepX int32
		var stepY int32

		var hit bool = false
		var side int8

		if rayDirX < 0 {
			stepX = -1
			sideDistX = (player.PosX - float64(mapX)) * deltaDistX
		} else {
			stepX = 1
			sideDistX = (float64(mapX) + 1.0 - player.PosX) * deltaDistX
		}

		if rayDirY < 0 {
			stepY = -1
			sideDistY = (player.PosY - float64(mapY)) * deltaDistY
		} else {
			stepY = 1
			sideDistY = (float64(mapY) + 1.0 - player.PosY) * deltaDistY
		}

		// DDA
		for !hit {
			if sideDistX < sideDistY {
				sideDistX += deltaDistX
				mapX += stepX
				side = 0
			} else {
				sideDistY += deltaDistY
				mapY += stepY
				side = 1
			}

			// ray hit a wall?
			if worldmap[mapX][mapY] > 0 {
				hit = true
			}
		}

		// distance
		if side == 0 {
			perpWallDist = (float64(mapX) - player.PosX + (1-float64(stepX))/2) / rayDirX
		} else {
			perpWallDist = (float64(mapY) - player.PosY + (1-float64(stepY))/2) / rayDirY
		}

		lineHeight := int32(200 / perpWallDist)

		var drawStart int32 = -lineHeight/2 + 200/2
		drawStart += player.LookY
		if drawStart < 0 {
			drawStart = 0
		}
		var drawEnd int32 = lineHeight/2 + 200/2
		drawEnd += player.LookY
		if drawEnd >= 200 {
			drawEnd = 200 /*- 1*/
		}

		// texture calculations

		// calculate value of WallX
		var wallX float64 // where exactly the wall was hit
		if side == 0 {
			wallX = player.PosY + perpWallDist*rayDirY
		} else {
			wallX = player.PosX + perpWallDist*rayDirX
		}
		wallX -= math.Floor(wallX)

		// x coordinate of the texture
		var texX = int32(wallX * 64)
		if side == 0 && rayDirX > 0 {
			texX = 64 - texX - 1
		}
		if side == 1 && rayDirY < 0 {
			texX = 64 - texX - 1
		}

		// screen texture to pixel stuff
		var step float64 = 1.0 * 64 / float64(lineHeight)
		var texPos float64 = float64((drawStart-player.LookY)-200/2+lineHeight/2) * step

		for y := drawStart; y < drawEnd; y++ {
			var texY int32 = int32(texPos) & (64 - 1)
			texPos += step
			var color uint32 = first_texture[texX+texY*64]

			if side == 1 {
				color = (color >> 1) & 0x7F7F7F7F
			}

			putPixel(int32(x), int32(y), color)
		}
	}
}

func DecodeBase64(data string) io.Reader {
	return base64.NewDecoder(base64.StdEncoding, strings.NewReader(data))
}

func imageFormatDecode(data string, dataType string) (image.Image, error) {
	if dataType == "jpg" {
		return jpeg.Decode(DecodeBase64(data))
	} else if dataType == "png" {
		return png.Decode(DecodeBase64(data))
	}
	return nil, errors.New("invalid data type for image to be decoded")
}

func textureDecoder(data string, dataType string, rescale bool, dest []uint32) {
	// Decode image from base64 to image binary according to type
	img, err := imageFormatDecode(data, dataType)
	if err != nil {
		panic(err)
	}

	if rescale {
		img = resize.Resize(64, 64, img, resize.Bilinear)
	}

	for y := img.Bounds().Min.Y; y < img.Bounds().Max.Y; y++ {
		for x := img.Bounds().Min.X; x < img.Bounds().Max.X; x++ {
			color := img.At(x, y)
			rr, gg, bb, aa := color.RGBA()
			// pack values into pixels
			var pixel uint32 = ((rr >> 8) << 24) | ((gg >> 8) << 16) | ((bb >> 8) << 8) | aa>>8
			dest[x+y*img.Bounds().Max.X] = pixel
		}
	}
}
